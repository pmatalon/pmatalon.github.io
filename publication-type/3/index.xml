<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>3 | Pierre Matalon</title>
    <link>https://pmatalon.github.io/publication-type/3/</link>
      <atom:link href="https://pmatalon.github.io/publication-type/3/index.xml" rel="self" type="application/rss+xml" />
    <description>3</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â©2121 Pierre Matalon</copyright><lastBuildDate>Thu, 02 Mar 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://pmatalon.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>3</title>
      <link>https://pmatalon.github.io/publication-type/3/</link>
    </image>
    
    <item>
      <title>Iterative solution to the biharmonic equation in mixed form discretized by the Hybrid High-Order method</title>
      <link>https://pmatalon.github.io/publication/2022-biharmonic-problem/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://pmatalon.github.io/publication/2022-biharmonic-problem/</guid>
      <description>&lt;h2 id=&#34;reproduction-of-the-numerical-experiments&#34;&gt;Reproduction of the numerical experiments&lt;/h2&gt;
&lt;p&gt;The experiments can be reproduced through the open-source code &lt;a href=&#34;https://pmatalon.github.io/software/fhhos4&#34; target=&#34;_blank&#34;&gt;fhhos4&lt;/a&gt;, release 1.2.&lt;/p&gt;
&lt;h3 id=&#34;convergence-of-the-discrete-normal-derivative&#34;&gt;Convergence of the discrete normal derivative&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-pb diff -geo square -source sine -s ch -mesh tri -normalder -k 0 -n 256
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;well-posedness&#34;&gt;Well-posedness&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# square cart
-pb bihar -geo square       -source sine -s ch -nbh-depth 8 -mesh cart -cs r -kc {0|1} -k {0|1|2|3|4} -n {8|16}
# polygonal(2)
-pb bihar -geo squarecircularhole -tc default -s ch -bihar-prec p -nbh-depth 8 -mesh poly -cs r -polymesh-bfc c -polymesh-n-pass 1 -n 16 -kc {0|1} -k {0|1|2|3} -ut
# polygonal(4) --&amp;gt; retry until you get a max of 4 boundary faces per element
-pb bihar -geo squarecircularhole -tc default -s ch -bihar-prec p -nbh-depth 8 -mesh poly -cs r -polymesh-bfc c -polymesh-n-pass 2 -n 32 -kc {0|1} -k {0|1|2|3} -ut
-pb bihar -geo magnetism2         -tc default -s ch -bihar-prec p -nbh-depth 8 -mesh poly -cs r -polymesh-bfc c -polymesh-n-pass 1 -kc 1 -k 5 -n 8 -export mesh -ut -fc-coplanar-tol 1e-5 -threads 0 -f-basis monomials -f-ogb 0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;convergence-of-the-biharmonic-scheme&#34;&gt;Convergence of the biharmonic scheme&lt;/h3&gt;
&lt;p&gt;Square, Cartesian mesh: use the arguments&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-pb bihar -geo square -source poly -s ch -bihar-prec s -nbh-depth 8 -mesh cart -cs r
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;k=0:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-k 0 -n  16 -tol 1e-7
-k 0 -n  32 -tol 1e-7
-k 0 -n  64 -tol 1e-7
-k 0 -n 128 -tol 1e-7
-k 0 -n 256 -tol 1e-7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;k=1:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-k 1 -n  16 -tol 1e-7
-k 1 -n  32 -tol 1e-7
-k 1 -n  64 -tol 1e-7
-k 1 -n 128 -tol 1e-7
-k 1 -n 256 -tol 1e-9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;k=2:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-k 2 -n  16 -tol 1e-7
-k 2 -n  32 -tol 1e-7
-k 2 -n  64 -tol 1e-9
-k 2 -n 128 -tol 1e-10
-k 2 -n 256 -tol 1e-11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;k=3:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-k 3 -n  16 -tol 1e-8
-k 3 -n  32 -tol 1e-9
-k 3 -n  64 -tol 1e-10
-k 3 -n 128 -tol 1e-11
-k 3 -n 256 -tol 1e-13
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;preconditioner-convergence&#34;&gt;Preconditioner convergence&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-pb bihar -geo square -source poly -s ch -mesh cart -cs r -k 1 -n 256 -tol 1e-14 -export iter -bihar-prec no #no preconditioner
-pb bihar -geo square -source poly -s ch -mesh cart -cs r -k 1 -n 256 -tol 1e-14 -export iter -nbh-depth {2|4|6|8|10} #with preconditioner
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;asymptotic-behaviour&#34;&gt;Asymptotic behaviour&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-pb bihar -geo square -source poly -mesh cart -cs r -s ch -nbh-depth 8 -tol 1e-8 -k {0,1,2,3} -n {32,64,128,256,512} 
-pb bihar -geo cube -mesh cart -not-compute-errors -s fcguamg -hp-cs p_h -nbh-depth 3 -tol 1e-8 -k 0 -n {16,32,64,128} 
-pb bihar -geo magnetism2 -tc default -mesh poly -polymesh-bfc c -polymesh-n-pass 2 -s ch -nbh-depth 8 -tol 1e-8 -k 0 -n {64,128,256,512, 1024} 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;heuristics&#34;&gt;Heuristics&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-pb bihar -geo square -source poly -s fcguamg -mesh tri -cs r -k 3 -n 32 -tol 1e-8 -bihar-prec p -nbh-depth 2 -export iter -opt2 {0|2} 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
